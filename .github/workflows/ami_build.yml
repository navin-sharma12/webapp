name: AMI build

on:
  push:
    branches: [main]

jobs:
  connect-remote:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: zip all files
        run: zip -r webapp.zip .

      - name: Install Packer
        run: |
          wget https://releases.hashicorp.com/packer/1.7.2/packer_1.7.2_linux_amd64.zip
          unzip -o packer_1.7.2_linux_amd64.zip -d /tmp
          chmod +x /tmp/packer
          sudo mv /tmp/packer /usr/local/bin/
          packer version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Packer pulgin installation
        run: packer init ./packer/webapp.pkr.hcl

      - name: Run Packer file
        run: packer build -var-file="./packer/variableFile.pkrvars.hcl" ./packer/webapp.pkr.hcl

      - name: Get latest AMI ID
        id: ami
        run: |
          echo "::set-output name=ami_id::$(aws ec2 describe-images --filters 'Name=name,Values=csye6225*' --query 'Images[0].ImageId' --output text)"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEMO_AWS_REGION }}

      - name: Create Launch Template
        run: |
          aws ec2 create-launch-template-version --launch-template-name ${{ secrets.LAUNCH_TEMPLATE }} --source-version 1 --launch-template-data '{"ImageId":"${{ steps.ami.outputs.ami_id }}"}'

      - name: Refresh autoscaling group
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }}
          status=""
          while [[ $status != "Successful" && $status != "Failed" && $status != "Cancelled" ]]; do
            status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
          done
          echo "Instance refresh status: $status"
          if [ $status != "Successful" ]; then
            echo "Instance refresh unsuccessfull. Exiting with an error."
            exit 1
          fi